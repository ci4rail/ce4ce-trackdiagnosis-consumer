// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: (c) 2024 Ci4Rail GmbH

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.24.3
// source: geotagged_accel.proto

package geotagged_accel

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// a chunk typically contains data from approx 1s time window
type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// delta time between individual acceleration samples in seconds
	DeltaTs float32 `protobuf:"fixed32,2,opt,name=deltaTs,proto3" json:"deltaTs,omitempty"`
	// 100ms time window chunks
	AccelChunks []*Chunk_AccelChunk `protobuf:"bytes,3,rep,name=accelChunks,proto3" json:"accelChunks,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geotagged_accel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_geotagged_accel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_geotagged_accel_proto_rawDescGZIP(), []int{0}
}

func (x *Chunk) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Chunk) GetDeltaTs() float32 {
	if x != nil {
		return x.DeltaTs
	}
	return 0
}

func (x *Chunk) GetAccelChunks() []*Chunk_AccelChunk {
	if x != nil {
		return x.AccelChunks
	}
	return nil
}

type Chunk_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GNSS location valid. If false, the other fields are not valid
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// WGS84 coordinates
	// latitude in [deg]
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude in [deg]
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// altitude in [m]
	Altitude float64 `protobuf:"fixed64,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// horizontal accuracy in [m]
	Eph float64 `protobuf:"fixed64,5,opt,name=eph,proto3" json:"eph,omitempty"`
	// vertical accuracy in [m]
	Epv float64 `protobuf:"fixed64,6,opt,name=epv,proto3" json:"epv,omitempty"`
}

func (x *Chunk_Position) Reset() {
	*x = Chunk_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geotagged_accel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk_Position) ProtoMessage() {}

func (x *Chunk_Position) ProtoReflect() protoreflect.Message {
	mi := &file_geotagged_accel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk_Position.ProtoReflect.Descriptor instead.
func (*Chunk_Position) Descriptor() ([]byte, []int) {
	return file_geotagged_accel_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Chunk_Position) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *Chunk_Position) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Chunk_Position) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Chunk_Position) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *Chunk_Position) GetEph() float64 {
	if x != nil {
		return x.Eph
	}
	return 0
}

func (x *Chunk_Position) GetEpv() float64 {
	if x != nil {
		return x.Epv
	}
	return 0
}

type Chunk_AccelSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// x Acceleration in g
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// y Acceleration in g
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	// z Acceleration in g
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Chunk_AccelSample) Reset() {
	*x = Chunk_AccelSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geotagged_accel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk_AccelSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk_AccelSample) ProtoMessage() {}

func (x *Chunk_AccelSample) ProtoReflect() protoreflect.Message {
	mi := &file_geotagged_accel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk_AccelSample.ProtoReflect.Descriptor instead.
func (*Chunk_AccelSample) Descriptor() ([]byte, []int) {
	return file_geotagged_accel_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Chunk_AccelSample) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Chunk_AccelSample) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Chunk_AccelSample) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// AccelChunk contains data within a 100ms time window (approx.)
type Chunk_AccelChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp of first AccelSample
	Ts *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	// Position mapped to first sample
	Position *Chunk_Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// Samples within this chunk
	Samples []*Chunk_AccelSample `protobuf:"bytes,4,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *Chunk_AccelChunk) Reset() {
	*x = Chunk_AccelChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geotagged_accel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk_AccelChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk_AccelChunk) ProtoMessage() {}

func (x *Chunk_AccelChunk) ProtoReflect() protoreflect.Message {
	mi := &file_geotagged_accel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk_AccelChunk.ProtoReflect.Descriptor instead.
func (*Chunk_AccelChunk) Descriptor() ([]byte, []int) {
	return file_geotagged_accel_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Chunk_AccelChunk) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Chunk_AccelChunk) GetPosition() *Chunk_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Chunk_AccelChunk) GetSamples() []*Chunk_AccelSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

var File_geotagged_accel_proto protoreflect.FileDescriptor

var file_geotagged_accel_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x65, 0x6f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x65, 0x6f, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x04, 0x0a, 0x05, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x73, 0x12, 0x43, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x65, 0x6f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x1a, 0x9a, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x70, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x70, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x70, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x70, 0x76, 0x1a,
	0x37, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x1a, 0xb3, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x65, 0x6f, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x65, 0x6f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x13,
	0x5a, 0x11, 0x2e, 0x2f, 0x67, 0x65, 0x6f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_geotagged_accel_proto_rawDescOnce sync.Once
	file_geotagged_accel_proto_rawDescData = file_geotagged_accel_proto_rawDesc
)

func file_geotagged_accel_proto_rawDescGZIP() []byte {
	file_geotagged_accel_proto_rawDescOnce.Do(func() {
		file_geotagged_accel_proto_rawDescData = protoimpl.X.CompressGZIP(file_geotagged_accel_proto_rawDescData)
	})
	return file_geotagged_accel_proto_rawDescData
}

var file_geotagged_accel_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_geotagged_accel_proto_goTypes = []interface{}{
	(*Chunk)(nil),                 // 0: geotagged_accel.Chunk
	(*Chunk_Position)(nil),        // 1: geotagged_accel.Chunk.Position
	(*Chunk_AccelSample)(nil),     // 2: geotagged_accel.Chunk.AccelSample
	(*Chunk_AccelChunk)(nil),      // 3: geotagged_accel.Chunk.AccelChunk
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_geotagged_accel_proto_depIdxs = []int32{
	3, // 0: geotagged_accel.Chunk.accelChunks:type_name -> geotagged_accel.Chunk.AccelChunk
	4, // 1: geotagged_accel.Chunk.AccelChunk.ts:type_name -> google.protobuf.Timestamp
	1, // 2: geotagged_accel.Chunk.AccelChunk.position:type_name -> geotagged_accel.Chunk.Position
	2, // 3: geotagged_accel.Chunk.AccelChunk.samples:type_name -> geotagged_accel.Chunk.AccelSample
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_geotagged_accel_proto_init() }
func file_geotagged_accel_proto_init() {
	if File_geotagged_accel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_geotagged_accel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geotagged_accel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geotagged_accel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk_AccelSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geotagged_accel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk_AccelChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_geotagged_accel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_geotagged_accel_proto_goTypes,
		DependencyIndexes: file_geotagged_accel_proto_depIdxs,
		MessageInfos:      file_geotagged_accel_proto_msgTypes,
	}.Build()
	File_geotagged_accel_proto = out.File
	file_geotagged_accel_proto_rawDesc = nil
	file_geotagged_accel_proto_goTypes = nil
	file_geotagged_accel_proto_depIdxs = nil
}
